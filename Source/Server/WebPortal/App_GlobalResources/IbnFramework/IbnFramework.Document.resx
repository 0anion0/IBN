<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
	Microsoft ResX Schema 
	
	Version 2.0
	
	The primary goals of this format is to allow a simple XML format 
	that is mostly human readable. The generation and parsing of the 
	various data types are done through the TypeConverter classes 
	associated with the data types.
	
	Example:
	
	... ado.net/XML headers & schema ...
	<resheader name="resmimetype">text/microsoft-resx</resheader>
	<resheader name="version">2.0</resheader>
	<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
	<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
	<data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
	<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
	<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
		<value>[base64 mime encoded serialized .NET Framework object]</value>
	</data>
	<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
		<value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
		<comment>This is a comment</comment>
	</data>
				
	There are any number of "resheader" rows that contain simple 
	name/value pairs.
	
	Each data row contains a name, and value. The row also contains a 
	type or mimetype. Type corresponds to a .NET class that support 
	text/value conversion through the TypeConverter architecture. 
	Classes that don't support this are serialized and stored with the 
	mimetype set.
	
	The mimetype is used for serialized objects, and tells the 
	ResXResourceReader how to depersist the object. This is currently not 
	extensible. For a given mimetype the value must be set accordingly:
	
	Note - application/x-microsoft.net.object.binary.base64 is the format 
	that the ResXResourceWriter will generate, however the reader can 
	read any of the formats listed below.
	
	mimetype: application/x-microsoft.net.object.binary.base64
	value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.
	
	mimetype: application/x-microsoft.net.object.soap.base64
	value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

	mimetype: application/x-microsoft.net.object.bytearray.base64
	value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="DocRes" xml:space="preserve">
		<value>Document Resources</value>
	</data>
	<data name="Description" xml:space="preserve">
		<value>Description</value>
	</data>
	<data name="DocumentType" xml:space="preserve">
		<value>Document Type</value>
	</data>
	<data name="Title" xml:space="preserve">
		<value>Title</value>
	</data>
	<data name="DocumentClass" xml:space="preserve">
		<value>Document</value>
	</data>
	<data name="Documents" xml:space="preserve">
		<value>Documents</value>
	</data>
	<data name="DocumentTypes" xml:space="preserve">
		<value>Document Types</value>
	</data>
	<data name="IncDocument" xml:space="preserve">
		<value>Incoming Document</value>
	</data>
	<data name="IncDocuments" xml:space="preserve">
		<value>Incoming Documents</value>
	</data>
	<data name="OutDocument" xml:space="preserve">
		<value>Outgoing Document</value>
	</data>
	<data name="OutDocuments" xml:space="preserve">
		<value>Outgoing Documents</value>
	</data>
	<data name="ReceptionDate" xml:space="preserve">
		<value>Reception Date</value>
	</data>
	<data name="ExpectedDuration" xml:space="preserve">
		<value>Expected Resolve Date</value>
	</data>
	<data name="SourceDocument" xml:space="preserve">
		<value>Source Document</value>
	</data>
	<data name="RegistrationNumber" xml:space="preserve">
		<value>Registration Number</value>
	</data>
	<data name="DocumentTemplate" xml:space="preserve">
		<value>Document Template</value>
	</data>
	<data name="DocumentTemplates" xml:space="preserve">
		<value>Document Templates</value>
	</data>
	<data name="AllDocuments" xml:space="preserve">
		<value>All Documents</value>
	</data>
	<data name="File" xml:space="preserve">
		<value>File</value>
	</data>
	<data name="Name" xml:space="preserve">
		<value>Name</value>
	</data>
	<data name="DocumentInfo" xml:space="preserve">
		<value>Document Info</value>
	</data>
	<data name="NewDocument" xml:space="preserve">
		<value>New Document</value>
	</data>
	<data name="DocumentProfileEdit" xml:space="preserve">
		<value>Document Profile Editing</value>
	</data>
	<data name="DocumentProfileNew" xml:space="preserve">
		<value>Document Profile Creation</value>
	</data>
	<data name="DocumentsDeleteWarning" xml:space="preserve">
		<value>Do you really want to delete all selected documents?</value>
	</data>
	<data name="TabInfo" xml:space="preserve">
		<value>Information</value>
	</data>
	<data name="TabVersions" xml:space="preserve">
		<value>Versions</value>
	</data>
	<data name="Index" xml:space="preserve">
		<value>Index</value>
	</data>
	<data name="Note" xml:space="preserve">
		<value>Note</value>
	</data>
	<data name="State" xml:space="preserve">
		<value>State</value>
	</data>
	<data name="Draft" xml:space="preserve">
		<value>Draft</value>
	</data>
	<data name="Active" xml:space="preserve">
		<value>Active</value>
	</data>
	<data name="Obsolete" xml:space="preserve">
		<value>Obsolete</value>
	</data>
	<data name="DocumentContentVersion" xml:space="preserve">
		<value>Document Content Version</value>
	</data>
	<data name="DocumentContentVersions" xml:space="preserve">
		<value>Document Content Versions</value>
	</data>
	<data name="DocumentContent" xml:space="preserve">
		<value>Document Content</value>
	</data>
	<data name="DocumentContents" xml:space="preserve">
		<value>Document Contents</value>
	</data>
	<data name="OwnerDocument" xml:space="preserve">
		<value>Owner Document</value>
	</data>
	<data name="CloneVersion" xml:space="preserve">
		<value>Clone Version</value>
	</data>
	<data name="CloneVersionWarning" xml:space="preserve">
		<value>Do you want to clone this document version?</value>
	</data>
	<data name="NewVersion" xml:space="preserve">
		<value>New Version</value>
	</data>
	<data name="EditVersion" xml:space="preserve">
		<value>Edit Version</value>
	</data>
	<data name="DeleteVersionWarning" xml:space="preserve">
		<value>Do you really want to delete selected document versions?</value>
	</data>
	<data name="ChangeStatusDraftWarning" xml:space="preserve">
		<value>Do you really want to set draft state to selected document versions?</value>
	</data>
	<data name="ChangeStatusActiveWarning" xml:space="preserve">
		<value>Do you really want to set active state to selected document versions?</value>
	</data>
	<data name="ChangeStatusObsoleteWarning" xml:space="preserve">
		<value>Do you really want to set obsolete state to selected document versions?</value>
	</data>
	<data name="ActiveVersion" xml:space="preserve">
		<value>Active Version</value>
	</data>
	<data name="Initiator" xml:space="preserve">
		<value>Initiator</value>
	</data>
	<data name="Author" xml:space="preserve">
		<value>Author</value>
	</data>
	<data name="Contact" xml:space="preserve">
		<value>Contact</value>
	</data>
	<data name="Organization" xml:space="preserve">
		<value>Organization</value>
	</data>
	<data name="IsOriginal" xml:space="preserve">
		<value>Is Original</value>
	</data>
	<data name="MasterDocument" xml:space="preserve">
		<value>Master Document</value>
	</data>
	<data name="TotalPageCount" xml:space="preserve">
		<value>Total Page Count</value>
	</data>
	<data name="DeliveryMail" xml:space="preserve">
		<value>Mail</value>
	</data>
	<data name="DeliveryEMail" xml:space="preserve">
		<value>E-mail</value>
	</data>
	<data name="DeliveryFax" xml:space="preserve">
		<value>Fax</value>
	</data>
	<data name="DocDeliveryType" xml:space="preserve">
		<value>Document Delivery Type</value>
	</data>
	<data name="OutgoingSourceDocument" xml:space="preserve">
		<value>Outgoing Source Document</value>
	</data>
	<data name="ReceivedBy" xml:space="preserve">
		<value>Received By</value>
	</data>
	<data name="DeliveredBy" xml:space="preserve">
		<value>Delivered by</value>
	</data>
</root>