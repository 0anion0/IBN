<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ChooseXmlFile" xml:space="preserve">
    <value>Choose MS Project file (.xml)</value>
  </data>
  <data name="ColHere" xml:space="preserve">
    <value>Collate Users Here</value>
  </data>
  <data name="ComplType" xml:space="preserve">
    <value>Completition type</value>
  </data>
  <data name="IBNUser" xml:space="preserve">
    <value>Project member</value>
  </data>
  <data name="MSPUser" xml:space="preserve">
    <value>MS Poject User</value>
  </data>
  <data name="NotSet" xml:space="preserve">
    <value>Not Set</value>
  </data>
  <data name="s1Title" xml:space="preserve">
    <value>User Collation </value>
  </data>
  <data name="s2Title" xml:space="preserve">
    <value>The project was imported successfully.</value>
  </data>
  <data name="s3Title" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="s7Text" xml:space="preserve">
    <value>Use the Issues Tracking to record issues related to your project
Add Files/Documents to your project you wish to share with the team
Create targeted tasks for specific resources to track individual efforts
Schedule events and meetings for different aspects of your project
Add financial items to further refine your budget and to stay on track
Import and Export Microsoft Project Plans
Run reports to assess your projects status</value>
  </data>
  <data name="s7TextHeader" xml:space="preserve">
    <value>What Else Can You Do with Your Project?</value>
  </data>
  <data name="s7TopText" xml:space="preserve">
    <value>You will now be placed into the project gantt chart screen to perform a number
of additional functions with your project.</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="SynchronizationComplete" xml:space="preserve">
    <value>Synchronization was completed successfully.</value>
  </data>
  <data name="tAttentionText" xml:space="preserve">
    <value>All project tasks wil be deleted! Do you really want to synchronize your portal project with another MS Project?</value>
  </data>
  <data name="tBack" xml:space="preserve">
    <value>&lt; Back</value>
  </data>
  <data name="tClose" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="tComplicationType" xml:space="preserve">
    <value>Comlication type</value>
  </data>
  <data name="tCTAll" xml:space="preserve">
    <value>Everybody must complete</value>
  </data>
  <data name="tCTAny" xml:space="preserve">
    <value>Anyone can complete</value>
  </data>
  <data name="tDownloadIBNProjectXML" xml:space="preserve">
    <value>Get XML file of portal project for further import to MS Project</value>
  </data>
  <data name="tErrorOccured" xml:space="preserve">
    <value>Error has occured during users collation. Press "Import" to import project anyway.</value>
  </data>
  <data name="tExportToMSProject" xml:space="preserve">
    <value>Export Portal —&gt; MS Project</value>
  </data>
  <data name="tFileRequired" xml:space="preserve">
    <value>Please choose existing XML file with project info from MS Project </value>
  </data>
  <data name="tFinish" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="tFinishSynchronization" xml:space="preserve">
    <value>Finish synchronization</value>
  </data>
  <data name="tGenIBNXMLMessage" xml:space="preserve">
    <value>Press "Next" button to get XML file of portal project</value>
  </data>
  <data name="tGetIBNXMLFile1" xml:space="preserve">
    <value>Downloading of XML for portal project should begin shortly. Click </value>
  </data>
  <data name="tGetIBNXMLFile2" xml:space="preserve">
    <value>, to download it manually. </value>
  </data>
  <data name="tHere" xml:space="preserve">
    <value>here</value>
  </data>
  <data name="tImport" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="tImportAnyway" xml:space="preserve">
    <value>Synchronize anyway</value>
  </data>
  <data name="tImportFromMSProject" xml:space="preserve">
    <value>Import Portal &lt;— MS Project</value>
  </data>
  <data name="tNext" xml:space="preserve">
    <value>Next &gt;</value>
  </data>
  <data name="tNSExportDecsription" xml:space="preserve">
    <value>
		Export procedure enables to convert and save the current portal project as an .xml file in the MS Project format. This file will contain the information regarding structure of the tasks, calendar and resources of the exported portal project.
		&lt;br /&gt;&lt;br /&gt;
		If an intensive data exchange between projects of the portal and MS Project is planned, it is recommended to use the Synchronization mode as Import/Export mode does not guarantee the full identity of tasks structure. 
	</value>
  </data>
  <data name="tNSImportDecsription" xml:space="preserve">
    <value>
		Import procedure is the process of file conversion from the MS Project format (.xml) to the portal project. Project import is suitable for creating the primary structure of project tasks.
		&lt;br /&gt;&lt;br /&gt;
		While importing the project the structure of the current project tasks will be replaced with the structure of imported project. Files, comments, timesheets and other information related to the existing project tasks will be lost. 
		&lt;br /&gt;&lt;br /&gt;
		If an intensive data exchange between projects of the Portal and MS Project is planned, it is recommended to use the Synchronization mode as Import/Export mode does not guarantee the full identity of tasks structure. 
	  </value>
  </data>
  <data name="tNSSyncDecsription" xml:space="preserve">
    <value>
		The synchronization process is based on the double data exchange between projects of the Portal and MS Project. This mode enables to use the project planning functionality of the MS Project and share the work with information in the Portal at the same time without any data loss. Changes made in the one system can be corresponded to another one through the .xml file.
		&lt;br /&gt;&lt;br /&gt;
		The portal project synchronized with the project in the MS Project format has several limitations. It is impossible to create, delete and move the tasks, change its time schedule or manage successors and predecessors. All these actions must be carried out in the MS Project. 
	</value>
  </data>
  <data name="tOf" xml:space="preserve">
    <value>from</value>
  </data>
  <data name="ToMSProjSync" xml:space="preserve">
    <value>Switch to synchronization mode</value>
  </data>
  <data name="TopTitle" xml:space="preserve">
    <value>Project Importing Wizard</value>
  </data>
  <data name="tStep" xml:space="preserve">
    <value>Step</value>
  </data>
  <data name="tSyncErrorMessage" xml:space="preserve">
    <value>An error occurred while synchronization.&lt;br/&gt; 
Check the “Synchronize anyway” box if you want to finish the synchronization process in spite of the error. All the information will be saved.</value>
  </data>
  <data name="tTopTitle" xml:space="preserve">
    <value>Microsoft Office Project data exchange wizard.</value>
  </data>
  <data name="tToSynchronizationMode" xml:space="preserve">
    <value>Turn to synchronization mode</value>
  </data>
  <data name="tUpdateInIBN" xml:space="preserve">
    <value>Update in Portal</value>
  </data>
  <data name="tUpdateInMSProject" xml:space="preserve">
    <value>Update in MS Project</value>
  </data>
  <data name="tUpInIBNDescription" xml:space="preserve">
    <value>
		&lt;br /&gt;&lt;br /&gt;
		This mode enables you to update your portal project according to changes that you make in Microsoft Project and use this as a basis for MS Project to Portal synchronization.
		&lt;br /&gt;&lt;br /&gt;
		On the next step of this wizard, you will select the MS Project XML file that you want to synchronize with your portal project.
		&lt;br /&gt;&lt;br /&gt;
		&lt;i&gt;Note: To create a Microsoft XML file, use "Save as..." in your Microsoft Project Desktop app and choose XML File Format.&lt;/i&gt;
	</value>
  </data>
  <data name="tUpInMSDescription" xml:space="preserve">
    <value>&lt;br /&gt;&lt;br /&gt;This mode enables to create an .xml file with the same structure as the original project of MS Project has according to all the changes made in the Portal.&lt;br /&gt;&lt;br /&gt;
Using MS Project you can create, delete and move project tasks, manage their duration, timeline, successors and predecessors. After that you can easily reflect these changes in the Portal.</value>
  </data>
  <data name="tUploadMSProjectXMLToIBN" xml:space="preserve">
    <value>Upload XML file of MS Project to Portal</value>
  </data>
  <data name="tWarning" xml:space="preserve">
    <value>Attention!</value>
  </data>
  <data name="tWizardFirstStep" xml:space="preserve">
    <value>Choose the data exchange type</value>
  </data>
  <data name="tFirstSynchDescription" xml:space="preserve">
    <value>
		&lt;br /&gt;&lt;br /&gt;
		This mode enables you to update your portal project according to changes that you make in Microsoft Project and use this as a basis for MS Project to Portal synchronization.
		&lt;br /&gt;&lt;br /&gt;
		While synchronizing the project the structure of the current project tasks will be replaced with the structure of synchronized project. Files, comments, timesheets and other information related to the existing project tasks will be lost. 
		&lt;br /&gt;&lt;br /&gt;
		On the next step of this wizard, you will select the MS Project XML file that you want to synchronize with your portal project.
		&lt;br /&gt;&lt;br /&gt;
		&lt;i&gt;Note: To create a Microsoft XML file, use "Save as..." in your Microsoft Project Desktop app and choose XML File Format.&lt;/i&gt;
	</value>
  </data>
  <data name="tWizardError" xml:space="preserve">
    <value>There was error during data exchange process.</value>
  </data>
</root>