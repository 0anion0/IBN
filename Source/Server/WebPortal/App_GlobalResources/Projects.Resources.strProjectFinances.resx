<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="tbBudgetInfo" xml:space="preserve">
    <value>Summary Budget Information</value>
  </data>
  <data name="Budget" xml:space="preserve">
    <value>Budget</value>
  </data>
  <data name="ActualCost" xml:space="preserve">
    <value>Actual</value>
  </data>
  <data name="EstimatedCost" xml:space="preserve">
    <value>Estimate</value>
  </data>
  <data name="tbItems" xml:space="preserve">
    <value>Fixed Cost Items</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Estimate" xml:space="preserve">
    <value>Estimate</value>
  </data>
  <data name="Actual" xml:space="preserve">
    <value>Actual</value>
  </data>
  <data name="tbAdd" xml:space="preserve">
    <value>Add Item</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Do you really want to delete this actual finance item?</value>
  </data>
  <data name="tbExpenses" xml:space="preserve">
    <value>Expenses</value>
  </data>
  <data name="tbExpensesAdd" xml:space="preserve">
    <value>Add Expense</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="FixedBudget" xml:space="preserve">
    <value>Fixed Budget</value>
  </data>
  <data name="tbLaborItems" xml:space="preserve">
    <value>Labor Cost Items</value>
  </data>
  <data name="tPrjFinance" xml:space="preserve">
    <value>Project Finances</value>
  </data>
  <data name="tTitle" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="tTarget" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="tCurrent" xml:space="preserve">
    <value>Current</value>
  </data>
  <data name="tSub" xml:space="preserve">
    <value>Sub</value>
  </data>
  <data name="tSum" xml:space="preserve">
    <value>Sum</value>
  </data>
  <data name="tClose" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="tChVal" xml:space="preserve">
    <value>Change Value</value>
  </data>
  <data name="tEditAcc" xml:space="preserve">
    <value>Edit Account</value>
  </data>
  <data name="tSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="tSaveParVal" xml:space="preserve">
    <value>Save Parent Value</value>
  </data>
  <data name="tDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="tNewAcc" xml:space="preserve">
    <value>Add Child Account</value>
  </data>
  <data name="tCancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="tAccount" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="tNewActual" xml:space="preserve">
    <value>Add Actual Item</value>
  </data>
  <data name="tActualDate" xml:space="preserve">
    <value>Actual Date</value>
  </data>
  <data name="tModifiedBy" xml:space="preserve">
    <value>Modified by</value>
  </data>
  <data name="tObjTitle" xml:space="preserve">
    <value>Object Title</value>
  </data>
  <data name="tRoot" xml:space="preserve">
    <value>Base Account</value>
  </data>
  <data name="tMoveAcc" xml:space="preserve">
    <value>Move Account</value>
  </data>
  <data name="tMoveTo" xml:space="preserve">
    <value>Move To</value>
  </data>
  <data name="tAccounts" xml:space="preserve">
    <value>Accounts</value>
  </data>
  <data name="tActFinances" xml:space="preserve">
    <value>Actual Finances</value>
  </data>
  <data name="accWarning" xml:space="preserve">
    <value>Do you really want to delete this account?</value>
  </data>
  <data name="tNoItems" xml:space="preserve">
    <value>No Items For Adding</value>
  </data>
  <data name="tAddFromClip" xml:space="preserve">
    <value>Add Related Project</value>
  </data>
  <data name="Clipboard" xml:space="preserve">
    <value>Clipboard</value>
  </data>
  <data name="tEdit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Empty" xml:space="preserve">
    <value>Empty</value>
  </data>
  <data name="DeletePlanMsg" xml:space="preserve">
    <value>Do you really want to delete this plan</value>
  </data>
  <data name="ActivateMsg" xml:space="preserve">
    <value>Finances function is not activated yet. To activate it click</value>
  </data>
  <data name="Activate" xml:space="preserve">
    <value>Activate</value>
  </data>
  <data name="ActivateSettings" xml:space="preserve">
    <value>Settings for activation</value>
  </data>
  <data name="ActivateHere" xml:space="preserve">
    <value>here</value>
  </data>
  <data name="From" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="To" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="tSpreadSheet" xml:space="preserve">
    <value>Spread sheets</value>
  </data>
  <data name="LastSaved" xml:space="preserve">
    <value>Last modified</value>
  </data>
  <data name="SpreadSheetType" xml:space="preserve">
    <value>Scale</value>
  </data>
  <data name="Template" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="tMonthQuarterYear" xml:space="preserve">
    <value>Month</value>
  </data>
  <data name="tWeekYear" xml:space="preserve">
    <value>Week</value>
  </data>
  <data name="tQuarterYear" xml:space="preserve">
    <value>Quarter</value>
  </data>
  <data name="tYear" xml:space="preserve">
    <value>Year</value>
  </data>
  <data name="tTotal" xml:space="preserve">
    <value>Project</value>
  </data>
  <data name="YearLimit" xml:space="preserve">
    <value>Year must be from 1995 to 2015</value>
  </data>
  <data name="tYearTotal" xml:space="preserve">
    <value>Total for Year</value>
  </data>
  <data name="tProjectTotal" xml:space="preserve">
    <value>Total for Project</value>
  </data>
  <data name="tQuartalTotal" xml:space="preserve">
    <value>Total for Quarter</value>
  </data>
  <data name="tGridHeader1" xml:space="preserve">
    <value>Cash flow / Time</value>
  </data>
  <data name="tLoadingMsg" xml:space="preserve">
    <value>L O A D I N G . . .</value>
  </data>
  <data name="tNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Fact" xml:space="preserve">
    <value>Fact</value>
  </data>
  <data name="Current" xml:space="preserve">
    <value>Current</value>
  </data>
  <data name="NotSelected" xml:space="preserve">
    <value>Not selected</value>
  </data>
  <data name="tNewItem" xml:space="preserve">
    <value>New item</value>
  </data>
  <data name="ActivateMsg2" xml:space="preserve">
    <value>The finace system is inactive.</value>
  </data>
  <data name="ReactivateMsg" xml:space="preserve">
    <value>All financial data for current project will be lost. Are you sure you want to deactivate finances for current project?</value>
  </data>
  <data name="ReactivateText" xml:space="preserve">
    <value>Deactivate finances</value>
  </data>
  <data name="tbEdit" xml:space="preserve">
    <value>EditItem</value>
  </data>
  <data name="CantAddRow" xml:space="preserve">
    <value>You cant add record to this row because for this block exists one or more records in actual finances</value>
  </data>
</root>