//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
// 
#pragma warning disable 1591

namespace Mediachase.Ibn.WebTrial.localhost {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TrialSoap", Namespace="http://ibnportal.ru/")]
    public partial class Trial : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CompanyRequestTrialOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompanyRequestTrial2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateTrialCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateTrialCompany2OperationCompleted;
        
        private System.Threading.SendOrPostCallback DomainExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrialPeriodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParentDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDailyLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTariffsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTariffRequestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Trial() {
            this.Url = global::Mediachase.Ibn.WebTrial.Properties.Settings.Default.Mediachase_Ibn_WebTrial_localhost_Trial;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CompanyRequestTrialCompletedEventHandler CompanyRequestTrialCompleted;
        
        /// <remarks/>
        public event CompanyRequestTrial2CompletedEventHandler CompanyRequestTrial2Completed;
        
        /// <remarks/>
        public event ActivateTrialCompanyCompletedEventHandler ActivateTrialCompanyCompleted;
        
        /// <remarks/>
        public event ActivateTrialCompany2CompletedEventHandler ActivateTrialCompany2Completed;
        
        /// <remarks/>
        public event DomainExistsCompletedEventHandler DomainExistsCompleted;
        
        /// <remarks/>
        public event GetTrialPeriodCompletedEventHandler GetTrialPeriodCompleted;
        
        /// <remarks/>
        public event GetParentDomainCompletedEventHandler GetParentDomainCompleted;
        
        /// <remarks/>
        public event GetCompanyInfoCompletedEventHandler GetCompanyInfoCompleted;
        
        /// <remarks/>
        public event AddPaymentCompletedEventHandler AddPaymentCompleted;
        
        /// <remarks/>
        public event GetDailyLogCompletedEventHandler GetDailyLogCompleted;
        
        /// <remarks/>
        public event GetPaymentInfoCompletedEventHandler GetPaymentInfoCompleted;
        
        /// <remarks/>
        public event GetTariffsCompletedEventHandler GetTariffsCompleted;
        
        /// <remarks/>
        public event AddTariffRequestCompletedEventHandler AddTariffRequestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/CompanyRequestTrial", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TrialResult CompanyRequestTrial(
                    string companyName, 
                    string sizeOfGroup, 
                    string description, 
                    string domain, 
                    string firstName, 
                    string lastName, 
                    string email, 
                    string phone, 
                    string country, 
                    string login, 
                    string password, 
                    string resellerGuid, 
                    string xml, 
                    string locale, 
                    out int requestId, 
                    out string requestGuid) {
            object[] results = this.Invoke("CompanyRequestTrial", new object[] {
                        companyName,
                        sizeOfGroup,
                        description,
                        domain,
                        firstName,
                        lastName,
                        email,
                        phone,
                        country,
                        login,
                        password,
                        resellerGuid,
                        xml,
                        locale});
            requestId = ((int)(results[1]));
            requestGuid = ((string)(results[2]));
            return ((TrialResult)(results[0]));
        }
        
        /// <remarks/>
        public void CompanyRequestTrialAsync(string companyName, string sizeOfGroup, string description, string domain, string firstName, string lastName, string email, string phone, string country, string login, string password, string resellerGuid, string xml, string locale) {
            this.CompanyRequestTrialAsync(companyName, sizeOfGroup, description, domain, firstName, lastName, email, phone, country, login, password, resellerGuid, xml, locale, null);
        }
        
        /// <remarks/>
        public void CompanyRequestTrialAsync(string companyName, string sizeOfGroup, string description, string domain, string firstName, string lastName, string email, string phone, string country, string login, string password, string resellerGuid, string xml, string locale, object userState) {
            if ((this.CompanyRequestTrialOperationCompleted == null)) {
                this.CompanyRequestTrialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompanyRequestTrialOperationCompleted);
            }
            this.InvokeAsync("CompanyRequestTrial", new object[] {
                        companyName,
                        sizeOfGroup,
                        description,
                        domain,
                        firstName,
                        lastName,
                        email,
                        phone,
                        country,
                        login,
                        password,
                        resellerGuid,
                        xml,
                        locale}, this.CompanyRequestTrialOperationCompleted, userState);
        }
        
        private void OnCompanyRequestTrialOperationCompleted(object arg) {
            if ((this.CompanyRequestTrialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompanyRequestTrialCompleted(this, new CompanyRequestTrialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/CompanyRequestTrial2", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TrialResult CompanyRequestTrial2(
                    string companyName, 
                    string sizeOfGroup, 
                    string description, 
                    string domain, 
                    string firstName, 
                    string lastName, 
                    string email, 
                    string phone, 
                    string country, 
                    string login, 
                    string password, 
                    string resellerGuid, 
                    string xml, 
                    string locale, 
                    string referrer, 
                    out int requestId, 
                    out string requestGuid) {
            object[] results = this.Invoke("CompanyRequestTrial2", new object[] {
                        companyName,
                        sizeOfGroup,
                        description,
                        domain,
                        firstName,
                        lastName,
                        email,
                        phone,
                        country,
                        login,
                        password,
                        resellerGuid,
                        xml,
                        locale,
                        referrer});
            requestId = ((int)(results[1]));
            requestGuid = ((string)(results[2]));
            return ((TrialResult)(results[0]));
        }
        
        /// <remarks/>
        public void CompanyRequestTrial2Async(string companyName, string sizeOfGroup, string description, string domain, string firstName, string lastName, string email, string phone, string country, string login, string password, string resellerGuid, string xml, string locale, string referrer) {
            this.CompanyRequestTrial2Async(companyName, sizeOfGroup, description, domain, firstName, lastName, email, phone, country, login, password, resellerGuid, xml, locale, referrer, null);
        }
        
        /// <remarks/>
        public void CompanyRequestTrial2Async(
                    string companyName, 
                    string sizeOfGroup, 
                    string description, 
                    string domain, 
                    string firstName, 
                    string lastName, 
                    string email, 
                    string phone, 
                    string country, 
                    string login, 
                    string password, 
                    string resellerGuid, 
                    string xml, 
                    string locale, 
                    string referrer, 
                    object userState) {
            if ((this.CompanyRequestTrial2OperationCompleted == null)) {
                this.CompanyRequestTrial2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompanyRequestTrial2OperationCompleted);
            }
            this.InvokeAsync("CompanyRequestTrial2", new object[] {
                        companyName,
                        sizeOfGroup,
                        description,
                        domain,
                        firstName,
                        lastName,
                        email,
                        phone,
                        country,
                        login,
                        password,
                        resellerGuid,
                        xml,
                        locale,
                        referrer}, this.CompanyRequestTrial2OperationCompleted, userState);
        }
        
        private void OnCompanyRequestTrial2OperationCompleted(object arg) {
            if ((this.CompanyRequestTrial2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompanyRequestTrial2Completed(this, new CompanyRequestTrial2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/ActivateTrialCompany", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TrialResult ActivateTrialCompany(int requestId, string requestGuid, out string portalUrl, out string login, out string password) {
            object[] results = this.Invoke("ActivateTrialCompany", new object[] {
                        requestId,
                        requestGuid});
            portalUrl = ((string)(results[1]));
            login = ((string)(results[2]));
            password = ((string)(results[3]));
            return ((TrialResult)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateTrialCompanyAsync(int requestId, string requestGuid) {
            this.ActivateTrialCompanyAsync(requestId, requestGuid, null);
        }
        
        /// <remarks/>
        public void ActivateTrialCompanyAsync(int requestId, string requestGuid, object userState) {
            if ((this.ActivateTrialCompanyOperationCompleted == null)) {
                this.ActivateTrialCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateTrialCompanyOperationCompleted);
            }
            this.InvokeAsync("ActivateTrialCompany", new object[] {
                        requestId,
                        requestGuid}, this.ActivateTrialCompanyOperationCompleted, userState);
        }
        
        private void OnActivateTrialCompanyOperationCompleted(object arg) {
            if ((this.ActivateTrialCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateTrialCompanyCompleted(this, new ActivateTrialCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/ActivateTrialCompany2", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TrialResult ActivateTrialCompany2(int requestId, string requestGuid, out string portalUrl, out string login, out string password, out string companyId) {
            object[] results = this.Invoke("ActivateTrialCompany2", new object[] {
                        requestId,
                        requestGuid});
            portalUrl = ((string)(results[1]));
            login = ((string)(results[2]));
            password = ((string)(results[3]));
            companyId = ((string)(results[4]));
            return ((TrialResult)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateTrialCompany2Async(int requestId, string requestGuid) {
            this.ActivateTrialCompany2Async(requestId, requestGuid, null);
        }
        
        /// <remarks/>
        public void ActivateTrialCompany2Async(int requestId, string requestGuid, object userState) {
            if ((this.ActivateTrialCompany2OperationCompleted == null)) {
                this.ActivateTrialCompany2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateTrialCompany2OperationCompleted);
            }
            this.InvokeAsync("ActivateTrialCompany2", new object[] {
                        requestId,
                        requestGuid}, this.ActivateTrialCompany2OperationCompleted, userState);
        }
        
        private void OnActivateTrialCompany2OperationCompleted(object arg) {
            if ((this.ActivateTrialCompany2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateTrialCompany2Completed(this, new ActivateTrialCompany2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/DomainExists", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DomainExists(string domain) {
            object[] results = this.Invoke("DomainExists", new object[] {
                        domain});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DomainExistsAsync(string domain) {
            this.DomainExistsAsync(domain, null);
        }
        
        /// <remarks/>
        public void DomainExistsAsync(string domain, object userState) {
            if ((this.DomainExistsOperationCompleted == null)) {
                this.DomainExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDomainExistsOperationCompleted);
            }
            this.InvokeAsync("DomainExists", new object[] {
                        domain}, this.DomainExistsOperationCompleted, userState);
        }
        
        private void OnDomainExistsOperationCompleted(object arg) {
            if ((this.DomainExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DomainExistsCompleted(this, new DomainExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/GetTrialPeriod", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTrialPeriod() {
            object[] results = this.Invoke("GetTrialPeriod", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTrialPeriodAsync() {
            this.GetTrialPeriodAsync(null);
        }
        
        /// <remarks/>
        public void GetTrialPeriodAsync(object userState) {
            if ((this.GetTrialPeriodOperationCompleted == null)) {
                this.GetTrialPeriodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrialPeriodOperationCompleted);
            }
            this.InvokeAsync("GetTrialPeriod", new object[0], this.GetTrialPeriodOperationCompleted, userState);
        }
        
        private void OnGetTrialPeriodOperationCompleted(object arg) {
            if ((this.GetTrialPeriodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrialPeriodCompleted(this, new GetTrialPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/GetParentDomain", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetParentDomain() {
            object[] results = this.Invoke("GetParentDomain", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetParentDomainAsync() {
            this.GetParentDomainAsync(null);
        }
        
        /// <remarks/>
        public void GetParentDomainAsync(object userState) {
            if ((this.GetParentDomainOperationCompleted == null)) {
                this.GetParentDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParentDomainOperationCompleted);
            }
            this.InvokeAsync("GetParentDomain", new object[0], this.GetParentDomainOperationCompleted, userState);
        }
        
        private void OnGetParentDomainOperationCompleted(object arg) {
            if ((this.GetParentDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParentDomainCompleted(this, new GetParentDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/GetCompanyInfo", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CompanyInfo GetCompanyInfo(string companyId) {
            object[] results = this.Invoke("GetCompanyInfo", new object[] {
                        companyId});
            return ((CompanyInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyInfoAsync(string companyId) {
            this.GetCompanyInfoAsync(companyId, null);
        }
        
        /// <remarks/>
        public void GetCompanyInfoAsync(string companyId, object userState) {
            if ((this.GetCompanyInfoOperationCompleted == null)) {
                this.GetCompanyInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyInfoOperationCompleted);
            }
            this.InvokeAsync("GetCompanyInfo", new object[] {
                        companyId}, this.GetCompanyInfoOperationCompleted, userState);
        }
        
        private void OnGetCompanyInfoOperationCompleted(object arg) {
            if ((this.GetCompanyInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyInfoCompleted(this, new GetCompanyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/AddPayment", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddPayment(string companyId, decimal amount, string orderNo) {
            this.Invoke("AddPayment", new object[] {
                        companyId,
                        amount,
                        orderNo});
        }
        
        /// <remarks/>
        public void AddPaymentAsync(string companyId, decimal amount, string orderNo) {
            this.AddPaymentAsync(companyId, amount, orderNo, null);
        }
        
        /// <remarks/>
        public void AddPaymentAsync(string companyId, decimal amount, string orderNo, object userState) {
            if ((this.AddPaymentOperationCompleted == null)) {
                this.AddPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPaymentOperationCompleted);
            }
            this.InvokeAsync("AddPayment", new object[] {
                        companyId,
                        amount,
                        orderNo}, this.AddPaymentOperationCompleted, userState);
        }
        
        private void OnAddPaymentOperationCompleted(object arg) {
            if ((this.AddPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPaymentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/GetDailyLog", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetDailyLog(string companyId, int days) {
            object[] results = this.Invoke("GetDailyLog", new object[] {
                        companyId,
                        days});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetDailyLogAsync(string companyId, int days) {
            this.GetDailyLogAsync(companyId, days, null);
        }
        
        /// <remarks/>
        public void GetDailyLogAsync(string companyId, int days, object userState) {
            if ((this.GetDailyLogOperationCompleted == null)) {
                this.GetDailyLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDailyLogOperationCompleted);
            }
            this.InvokeAsync("GetDailyLog", new object[] {
                        companyId,
                        days}, this.GetDailyLogOperationCompleted, userState);
        }
        
        private void OnGetDailyLogOperationCompleted(object arg) {
            if ((this.GetDailyLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDailyLogCompleted(this, new GetDailyLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/GetPaymentInfo", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetPaymentInfo(string companyId, int days) {
            object[] results = this.Invoke("GetPaymentInfo", new object[] {
                        companyId,
                        days});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetPaymentInfoAsync(string companyId, int days) {
            this.GetPaymentInfoAsync(companyId, days, null);
        }
        
        /// <remarks/>
        public void GetPaymentInfoAsync(string companyId, int days, object userState) {
            if ((this.GetPaymentInfoOperationCompleted == null)) {
                this.GetPaymentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentInfoOperationCompleted);
            }
            this.InvokeAsync("GetPaymentInfo", new object[] {
                        companyId,
                        days}, this.GetPaymentInfoOperationCompleted, userState);
        }
        
        private void OnGetPaymentInfoOperationCompleted(object arg) {
            if ((this.GetPaymentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentInfoCompleted(this, new GetPaymentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/GetTariffs", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetTariffs() {
            object[] results = this.Invoke("GetTariffs", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetTariffsAsync() {
            this.GetTariffsAsync(null);
        }
        
        /// <remarks/>
        public void GetTariffsAsync(object userState) {
            if ((this.GetTariffsOperationCompleted == null)) {
                this.GetTariffsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTariffsOperationCompleted);
            }
            this.InvokeAsync("GetTariffs", new object[0], this.GetTariffsOperationCompleted, userState);
        }
        
        private void OnGetTariffsOperationCompleted(object arg) {
            if ((this.GetTariffsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTariffsCompleted(this, new GetTariffsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ibnportal.ru/AddTariffRequest", RequestNamespace="http://ibnportal.ru/", ResponseNamespace="http://ibnportal.ru/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddTariffRequest(string companyId, int tariffId, string description) {
            this.Invoke("AddTariffRequest", new object[] {
                        companyId,
                        tariffId,
                        description});
        }
        
        /// <remarks/>
        public void AddTariffRequestAsync(string companyId, int tariffId, string description) {
            this.AddTariffRequestAsync(companyId, tariffId, description, null);
        }
        
        /// <remarks/>
        public void AddTariffRequestAsync(string companyId, int tariffId, string description, object userState) {
            if ((this.AddTariffRequestOperationCompleted == null)) {
                this.AddTariffRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTariffRequestOperationCompleted);
            }
            this.InvokeAsync("AddTariffRequest", new object[] {
                        companyId,
                        tariffId,
                        description}, this.AddTariffRequestOperationCompleted, userState);
        }
        
        private void OnAddTariffRequestOperationCompleted(object arg) {
            if ((this.AddTariffRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTariffRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ibnportal.ru/")]
    public enum TrialResult {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        RequestPending,
        
        /// <remarks/>
        WaitingForActivation,
        
        /// <remarks/>
        Failed,
        
        /// <remarks/>
        UserRegistered,
        
        /// <remarks/>
        DomainExists,
        
        /// <remarks/>
        InvalidRequest,
        
        /// <remarks/>
        AlreadyActivated,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ibnportal.ru/")]
    public partial class CompanyInfo {
        
        private string companyIdField;
        
        private string companyNameField;
        
        private bool isActiveField;
        
        private string schemeField;
        
        private string hostField;
        
        private string portField;
        
        private string portalUrlField;
        
        private int databaseSizeField;
        
        private int usersCountField;
        
        private int maxDatabaseSizeField;
        
        private int maxUsersCountField;
        
        private int maxExternalUsersCountField;
        
        private System.DateTime trialStartDateField;
        
        private System.DateTime trialEndDateField;
        
        private bool isTrialField;
        
        private string contactNameField;
        
        private string contactPhoneField;
        
        private string contactEmailField;
        
        private bool sendNotificationsField;
        
        private int tariffIdField;
        
        private string tariffNameField;
        
        private string tariffDescriptionField;
        
        private decimal tariffMonthlyCostField;
        
        private System.DateTime tariffStartDateField;
        
        private string tariffCurrencySymbolField;
        
        private decimal balanceField;
        
        private int discountField;
        
        private decimal creditLimitField;
        
        private decimal alertThresholdField;
        
        /// <remarks/>
        public string CompanyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        public string Scheme {
            get {
                return this.schemeField;
            }
            set {
                this.schemeField = value;
            }
        }
        
        /// <remarks/>
        public string Host {
            get {
                return this.hostField;
            }
            set {
                this.hostField = value;
            }
        }
        
        /// <remarks/>
        public string Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        public string PortalUrl {
            get {
                return this.portalUrlField;
            }
            set {
                this.portalUrlField = value;
            }
        }
        
        /// <remarks/>
        public int DatabaseSize {
            get {
                return this.databaseSizeField;
            }
            set {
                this.databaseSizeField = value;
            }
        }
        
        /// <remarks/>
        public int UsersCount {
            get {
                return this.usersCountField;
            }
            set {
                this.usersCountField = value;
            }
        }
        
        /// <remarks/>
        public int MaxDatabaseSize {
            get {
                return this.maxDatabaseSizeField;
            }
            set {
                this.maxDatabaseSizeField = value;
            }
        }
        
        /// <remarks/>
        public int MaxUsersCount {
            get {
                return this.maxUsersCountField;
            }
            set {
                this.maxUsersCountField = value;
            }
        }
        
        /// <remarks/>
        public int MaxExternalUsersCount {
            get {
                return this.maxExternalUsersCountField;
            }
            set {
                this.maxExternalUsersCountField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TrialStartDate {
            get {
                return this.trialStartDateField;
            }
            set {
                this.trialStartDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TrialEndDate {
            get {
                return this.trialEndDateField;
            }
            set {
                this.trialEndDateField = value;
            }
        }
        
        /// <remarks/>
        public bool IsTrial {
            get {
                return this.isTrialField;
            }
            set {
                this.isTrialField = value;
            }
        }
        
        /// <remarks/>
        public string ContactName {
            get {
                return this.contactNameField;
            }
            set {
                this.contactNameField = value;
            }
        }
        
        /// <remarks/>
        public string ContactPhone {
            get {
                return this.contactPhoneField;
            }
            set {
                this.contactPhoneField = value;
            }
        }
        
        /// <remarks/>
        public string ContactEmail {
            get {
                return this.contactEmailField;
            }
            set {
                this.contactEmailField = value;
            }
        }
        
        /// <remarks/>
        public bool SendNotifications {
            get {
                return this.sendNotificationsField;
            }
            set {
                this.sendNotificationsField = value;
            }
        }
        
        /// <remarks/>
        public int TariffId {
            get {
                return this.tariffIdField;
            }
            set {
                this.tariffIdField = value;
            }
        }
        
        /// <remarks/>
        public string TariffName {
            get {
                return this.tariffNameField;
            }
            set {
                this.tariffNameField = value;
            }
        }
        
        /// <remarks/>
        public string TariffDescription {
            get {
                return this.tariffDescriptionField;
            }
            set {
                this.tariffDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public decimal TariffMonthlyCost {
            get {
                return this.tariffMonthlyCostField;
            }
            set {
                this.tariffMonthlyCostField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime TariffStartDate {
            get {
                return this.tariffStartDateField;
            }
            set {
                this.tariffStartDateField = value;
            }
        }
        
        /// <remarks/>
        public string TariffCurrencySymbol {
            get {
                return this.tariffCurrencySymbolField;
            }
            set {
                this.tariffCurrencySymbolField = value;
            }
        }
        
        /// <remarks/>
        public decimal Balance {
            get {
                return this.balanceField;
            }
            set {
                this.balanceField = value;
            }
        }
        
        /// <remarks/>
        public int Discount {
            get {
                return this.discountField;
            }
            set {
                this.discountField = value;
            }
        }
        
        /// <remarks/>
        public decimal CreditLimit {
            get {
                return this.creditLimitField;
            }
            set {
                this.creditLimitField = value;
            }
        }
        
        /// <remarks/>
        public decimal AlertThreshold {
            get {
                return this.alertThresholdField;
            }
            set {
                this.alertThresholdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CompanyRequestTrialCompletedEventHandler(object sender, CompanyRequestTrialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompanyRequestTrialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompanyRequestTrialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TrialResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrialResult)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int requestId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string requestGuid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CompanyRequestTrial2CompletedEventHandler(object sender, CompanyRequestTrial2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompanyRequestTrial2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompanyRequestTrial2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TrialResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrialResult)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int requestId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string requestGuid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ActivateTrialCompanyCompletedEventHandler(object sender, ActivateTrialCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateTrialCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateTrialCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TrialResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrialResult)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string portalUrl {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string login {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ActivateTrialCompany2CompletedEventHandler(object sender, ActivateTrialCompany2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateTrialCompany2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateTrialCompany2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TrialResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrialResult)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string portalUrl {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string login {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string companyId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DomainExistsCompletedEventHandler(object sender, DomainExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DomainExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DomainExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTrialPeriodCompletedEventHandler(object sender, GetTrialPeriodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrialPeriodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrialPeriodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetParentDomainCompletedEventHandler(object sender, GetParentDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParentDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParentDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetCompanyInfoCompletedEventHandler(object sender, GetCompanyInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CompanyInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CompanyInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddPaymentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetDailyLogCompletedEventHandler(object sender, GetDailyLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDailyLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDailyLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetPaymentInfoCompletedEventHandler(object sender, GetPaymentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTariffsCompletedEventHandler(object sender, GetTariffsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTariffsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTariffsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddTariffRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591